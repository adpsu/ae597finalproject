import pandas as pd
import matplotlib.pyplot as plt
import numpy as np

# Assuming ev_df is already loaded with the appropriate columns
# ev_df = pd.read_csv('path_to_your_data.csv')  # Uncomment and modify with your actual data path
# and_filtered_df = pd.read_csv('path_to_your_benchmark_data.csv')  # Load benchmark data

# Filter out data for the Tech types we're interested in
tech_types = ['BEV_200', 'BEV_300', 'BEV_400']
filtered_df = ev_df[ev_df['Tech'].isin(tech_types)]

def plot_bubble_chart(y_column, title, ylabel):
    plt.figure(figsize=(12, 8))
    ax = plt.gca()
    
    # Draw benchmark lines from another dataset
    for tech in tech_types:
        benchmark = and_filtered_df[and_filtered_df['Tech'] == tech]
        if y_column == 'MSRP':
            ax.axhline(y=benchmark['msrp'].values[0], color='r', linestyle='-', linewidth=2)
        else:
            ax.axhline(y=benchmark['fe_comb'].values[0], color='r', linestyle='-', linewidth=2)

    for tech in tech_types:
        subset = filtered_df[filtered_df['Tech'] == tech]
        sizes_scaled = subset['total_sales'] / 2  # Scale down the size by half
        scatter = ax.scatter([tech] * len(subset), subset[y_column], s=sizes_scaled, alpha=0.5, label=tech)

        # Annotate the largest and smallest bubbles
        if not subset.empty:
            largest = subset.loc[subset['total_sales'].idxmax()]
            smallest = subset.loc[subset['total_sales'].idxmin()]
            ax.annotate(largest['Best Match MSRP'], (tech, largest[y_column]), xytext=(40,-10),
                        textcoords="offset points", ha='right', 
                        arrowprops=dict(arrowstyle="->", connectionstyle="angle,angleA=0,angleB=-105,rad=10"))
            ax.annotate(smallest['Best Match MSRP'], (tech, smallest[y_column]), xytext=(40,10),
                        textcoords="offset points", ha='right', 
                        arrowprops=dict(arrowstyle="->", connectionstyle="angle,angleA=0,angleB=105,rad=10"))

    plt.xlabel('Technology')
    plt.ylabel(ylabel)
    plt.title(title)
    plt.grid(True)
    
    # Custom legend for bubble sizes
    sales_values = np.linspace(subset['total_sales'].min(), subset['total_sales'].max(), num=5) / 2
    legend_labels = [f'{int(s*2)}' for s in sales_values]  # Reverse the scaling for display
    handles = [plt.scatter([], [], s=s, label=l, color="gray", alpha=0.5) for s, l in zip(sales_values, legend_labels)]
    ax.legend(handles=handles, title="Total Sales (size)", bbox_to_anchor=(1.05, 1), loc='upper left')

    plt.show()

# Plot for MSRP
plot_bubble_chart('MSRP', 'MSRP by BEV Technology with Sales Volume as Bubble Size', 'MSRP ($)')

# Plot for fe_comb
plot_bubble_chart('fe_comb', 'Fuel Efficiency by BEV Technology with Sales Volume as Bubble Size', 'Fuel Efficiency (wh/mile)')
