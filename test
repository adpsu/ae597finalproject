import matplotlib.pyplot as plt
from shapely.geometry import Point

def plot_parcel_with_closest_feeder(
    county_layers, 
    light_box_gdf, 
    feeder_layer_name="Con Edison EVM Feeder Winter Load Capacity for 3PH Feeders", 
    county_boundary_layer_name="36119 Westchester boundary",
    parcel_type="Residential", 
    color="orange",
    show_ev_headroom=False
):
    """
    Plots parcels of a specified type within a county boundary and assigns the closest feeder's EV_HEADROOM.
    
    Args:
    - county_layers (dict): Dictionary of GeoDataFrames for county layers.
    - light_box_gdf (GeoDataFrame): GeoDataFrame of parcels with geometry and parcel type.
    - feeder_layer_name (str): Name of the feeder layer in county_layers.
    - county_boundary_layer_name (str): Name of the county boundary layer in county_layers.
    - parcel_type (str): Type of parcel to filter (e.g., "Residential").
    - color (str): Color to use for the plot of selected parcels.
    - show_ev_headroom (bool): If True, plot parcels with shading by EV_HEADROOM.
    """
    # Retrieve the boundary and feeder layers
    county_boundary_gdf = county_layers.get(county_boundary_layer_name)
    feeder_gdf = county_layers.get(feeder_layer_name)

    # Verify that both the county boundary and feeder layers were retrieved successfully
    if county_boundary_gdf is None or feeder_gdf is None:
        print("County boundary or feeder data not found.")
        return

    # Use the single geometry from the county boundary GeoDataFrame
    county_boundary = county_boundary_gdf.geometry.iloc[0]
    
    # Select specified parcel type within the county boundary
    selected_parcels = light_box_gdf[
        (light_box_gdf["parcel_type"] == parcel_type) & 
        (light_box_gdf.within(county_boundary))
    ].copy()
    
    # Ensure CRS matches between parcels and feeder lines
    selected_parcels = selected_parcels.to_crs(feeder_gdf.crs)
    
    # Find the closest feeder for each selected parcel and save FEEDER_ID and EV_HEADROOM
    closest_ev_headroom = []
    closest_feeder_id = []
    
    for polygon in selected_parcels.geometry:
        polygon_centroid = polygon.centroid
        
        # Calculate distance from centroid to each feeder line
        distances = feeder_gdf.geometry.apply(lambda line: polygon_centroid.distance(line))
        
        # Get the index of the closest feeder and retrieve its EV_HEADROOM and FEEDER_ID
        closest_idx = distances.idxmin()
        closest_ev_headroom.append(feeder_gdf.loc[closest_idx, "EV_HEADROOM"])
        closest_feeder_id.append(feeder_gdf.loc[closest_idx, "FEEDER_ID"])
    
    # Assign the closest EV_HEADROOM and FEEDER_ID to each selected parcel
    selected_parcels["EV_HEADROOM"] = closest_ev_headroom
    selected_parcels["FEEDER_ID"] = closest_feeder_id
    
    # Determine plot limits from the county boundary
    xlim = (county_boundary.bounds[0], county_boundary.bounds[2])
    ylim = (county_boundary.bounds[1], county_boundary.bounds[3])
    
    # Plot the results
    base = county_boundary_gdf.plot(color="none", edgecolor="black")
    feeder_gdf.plot(ax=base, color="blue", label="Feeder Lines")
    
    if show_ev_headroom:
        # Plot with color based on EV_HEADROOM values
        selected_parcels.plot(
            ax=base, column="EV_HEADROOM", legend=True, cmap="OrRd",
            legend_kwds={'label': "EV Headroom (MW)", 'orientation': "horizontal"}
        )
    else:
        # Plot using a single color
        selected_parcels.plot(ax=base, color=color, label=f"{parcel_type} Parcels")

    # Set plot limits and title
    plt.xlim(xlim)
    plt.ylim(ylim)
    plt.title(f"{parcel_type} Parcels with Closest Feeder EV_HEADROOM in {county_boundary_layer_name}")
    plt.legend()
    plt.show()
    
    # Display the updated DataFrame with FEEDER_ID and EV_HEADROOM
    print(selected_parcels[["geometry", "FEEDER_ID", "EV_HEADROOM"]].head())
    return selected_parcels

# Example usage
# plot_parcel_with_closest_feeder(county_layers, light_box_gdf, parcel_type="Residential", color="orange", show_ev_headroom=False)
