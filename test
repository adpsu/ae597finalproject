import contextily as ctx
# Replace Stamen Toner Lite with an alternative basemap provider
basemap_source = ctx.providers.OpenStreetMap.Mapnik  # Alternative basemap

# Filter truck flow data where 'TOT Mixed Freight-Trips_17 All' >= 5
filtered_truck_flow = truck_flow[truck_flow['TOT Mixed Freight-Trips_17 All'] >= 10]

# Merge the filtered truck flow data with highway geometries
merged_truck_flow = highway_within_buffer.merge(
    filtered_truck_flow, left_on='ID', right_on='ID'
)

# Plot the results
fig, ax = plt.subplots(figsize=(15, 10))

# Plot the highway network (base layer)
highway_within_buffer.plot(ax=ax, color='gray', linewidth=0.5, label='Filtered Highway Network')

# Plot the buffer
gpd.GeoSeries([buffer]).plot(ax=ax, color='lightblue', alpha=0.5, label='1000-Mile Boundary')

# Plot the original sample port
gpd.GeoDataFrame([sample_port], geometry='adjusted_geometry').plot(ax=ax, color='red', label='Sample Port')

# Plot the truck flow using merged geometries
merged_truck_flow.plot(
    ax=ax,
    column='TOT Mixed Freight-Trips_17 All',
    cmap='OrRd',
    legend=True,
    legend_kwds={'label': 'Daily Truck Flow (Trips)', 'shrink': 0.6}
)

# Plot the filtered ports
ports_within_buffer.plot(ax=ax, color='green', label='Filtered Ports')

# Add a basemap
ctx.add_basemap(ax, source=basemap_source, crs=highway_within_buffer.crs)

# Add legend and title
plt.legend(loc='upper right')
plt.title('Filtered Ports, Highway Network, and Truck Flow Within 250-Mile Boundary')
plt.show()








merged_truck_flow['TOT Mixed Freight-Trips_17 All'].hist(bins=100)



# Merge truck_flow with highway_network to add geometry
truck_flow_geo = truck_flow.merge(
    highway_network[['ID', 'geometry']], 
    on='ID', 
    how='inner'
)

# Convert to GeoDataFrame
truck_flow_geo = gpd.GeoDataFrame(truck_flow_geo, geometry='geometry')

# Ensure CRS matches between truck_flow_geo and ports
if truck_flow_geo.crs != ports.crs:
    truck_flow_geo = truck_flow_geo.to_crs(ports.crs)


from shapely.ops import nearest_points

def find_nearest_link(port, truck_flow_geo):
    # Find the nearest geometry
    nearest_geom = nearest_points(port, truck_flow_geo.unary_union)[1]
    
    # Match the geometry in truck_flow_geo
    nearest_link = truck_flow_geo.loc[truck_flow_geo.geometry == nearest_geom]
    
    # Check if any link was found
    if nearest_link.empty:
        return None  # Return None if no match is found
    
    return nearest_link.iloc[0]

# Assign nearest link truck flow to each port
ports['nearest_link'] = ports.geometry.apply(lambda x: find_nearest_link(x, truck_flow_geo))

# Filter out ports with no nearest link
ports_with_links = ports[ports['nearest_link'].notnull()]

# Assign truck flow from nearest links
ports_with_links['TOT Mixed Freight-Trips_17 All'] = ports_with_links['nearest_link'].apply(
    lambda x: x['TOT Mixed Freight-Trips_17 All'] if isinstance(x, pd.Series) else None
)





import osmnx as ox
import geopandas as gpd

# Fetch mainland US polygon (if needed for clipping)
mainland_us = ox.geocode_to_gdf("United States", which_result=1)

# Fetch county-level administrative boundaries
import geopandas as gpd

# Load the TIGER/Line county shapefile
county_shapefile = "/Users/adwaydas/epa_task7/data/tl_2024_us_county/tl_2024_us_county.shp"  # Replace with the actual path
counties = gpd.read_file(county_shapefile)

# Generate 200-mile (approx. 321 km) buffers for each port
mile_to_meter = 1609.34
ports['buffer'] = ports.geometry.buffer(200 * mile_to_meter)

# Ensure CRS matches between counties and ports
if counties.crs != ports.crs:
    counties = counties.to_crs(ports.crs)

# Ensure the 'buffer' column is set as the active geometry
ports = ports.set_geometry('buffer')

# Spatial overlay to intersect counties with port buffers
counties_within_buffers = gpd.overlay(counties, ports[['buffer', 'FID']], how='intersection')

# Set geometry back to 'geometry' after the overlay
counties_within_buffers = counties_within_buffers.set_geometry('geometry')

# Calculate intersection area
counties_within_buffers['intersection_area'] = counties_within_buffers.geometry.area



# Normalize intersection area by grouping based on the correct column
counties_within_buffers['normalized_area'] = counties_within_buffers.groupby('GEOID')['intersection_area'].transform('sum')

# Calculate trip share based on the normalized intersection area
counties_within_buffers['trip_share'] = counties_within_buffers['intersection_area'] / counties_within_buffers['normalized_area']

# Distribute trips from each port to intersecting counties
counties_within_buffers['trips'] = counties_within_buffers['trip_share'] * counties_within_buffers['TOT Mixed Freight-Trips_17 All']




# Normalize intersection area to distribute trips
counties_within_buffers['normalized_area'] = counties_within_buffers.groupby('index')['intersection_area'].transform('sum')
counties_within_buffers['trip_share'] = counties_within_buffers['intersection_area'] / counties_within_buffers['normalized_area']

# Distribute trips from each port to intersecting counties
counties_within_buffers['trips'] = counties_within_buffers['trip_share'] * counties_within_buffers['TOT Mixed Freight-Trips_17 All']



# Adjust trips for overlapping counties served by multiple ports
for county_id, group in counties_within_buffers.groupby('county_id'):
    total_trips = group['trips'].sum()
    overlap_ports = group['ID'].nunique()
    counties_within_buffers.loc[group.index, 'final_trips'] = group['trips'] / overlap_ports



# Iterate over overlapping counties to refine trip allocation
for i in range(5):  # Example: 5 iterations
    for county_id, group in counties_within_buffers.groupby('county_id'):
        counties_within_buffers.loc[group.index, 'final_trips'] = group['trips'] / group['ID'].nunique()




import matplotlib.pyplot as plt

# Plot the distribution of trips
fig, ax = plt.subplots(figsize=(15, 10))

# Plot counties with trips
counties_within_buffers.plot(
    ax=ax,
    column='final_trips',
    cmap='OrRd',
    legend=True,
    legend_kwds={'label': 'Estimated Trips to Counties'}
)

# Plot ports and their buffers
ports.plot(ax=ax, color='blue', label='Ports')
gpd.GeoSeries(ports['buffer']).plot(ax=ax, color='lightblue', alpha=0.3, label='Port Service Boundaries')

# Add title and legend
plt.title("Estimated Truck Trips to Counties from Ports")
plt.legend()
plt.show()

